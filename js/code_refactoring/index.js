/**
 * 代码重构
 */

/*
    提炼函数
    如果在函数中有一段代码可以被独立出来，那我们最好把这些代码放进另外一个独立的函数中。
    这是一种很常见的优化工作，这样做的好处主要有以下几点。

        避免出现超大函数。

        独立出来的函数有助于代码复用。

        独立出来的函数更容易被覆写。

        独立出来的函数如果拥有一个良好的命名，它本身就起到了注释的作用。
 */

/*
    合并重复的条件片段
    如果一个函数体内有一些条件分支语句，而这些条件分支语句内部散布了一些重复的代码，那么就有必要进行合并去重工作。
 */

/*
    把条件分支语句提炼成函数
    在程序设计中，复杂的条件分支语句是导致程序难以阅读和理解的重要原因，而且容易导致一个庞大的函数。
 */

/*
    合理使用循环
    在函数体内，如果有些代码实际上负责的是一些重复性的工作，那么合理利用循环不仅可以完成同样的功能，还可以使代码量更少。
 */

/*
    提前让函数退出代替嵌套条件分支
    许多程序员都有这样一种观念：“每个函数只能有一个入口和一个出口。”现代编程语言都会限制函数只有一个入口。
    但关于“函数只有一个出口”，往往会有一些不同的看法。

    用《重构》里的话说，嵌套的条件分支往往是由一些深信“每个函数只能有一个出口的”程序员写出的。
    但实际上，如果对函数的剩余部分不感兴趣，那就应该立即退出。
 */

/*
    传递对象参数代替过长的参数列表
    有时候一个函数有可能接收多个参数，而参数的数量越多，函数就越难理解和使用。
    使用该函数的人首先得搞明白全部参数的含义，在使用的时候，还要小心翼翼，以免少传了某个参数或者把两个参数搞反了位置。
 */

/*
    尽量减少参数数量
    如果调用一个函数时需要传入多个参数，那这个函数是让人望而生畏的，我们必须搞清楚这些参数代表的含义，必须小心翼翼地把它们按照顺序传入该函数。
    而如果一个函数不需要传入任何参数就可以使用，这种函数是深受人们喜爱的。
    在实际开发中，向函数传递参数不可避免，但我们应该尽量减少函数接收的参数数量。
 */

/*
    少用三目运算符
    有一些程序员喜欢大规模地使用三目运算符，来代替传统的 if、else。理由是三目运算符性能高，代码量少。
    不过，这两个理由其实都很难站得住脚。

    即使我们假设三目运算符的效率真的比 if、else 高，这点差距也是完全可以忽略不计的。

    相比损失的代码可读性和可维护性，三目运算符节省的代码量也可以忽略不计。
 */

/*
    合理使用链式调用
    如果该链条的结构相对稳定，后期不易发生修改，那么使用链式调用无可厚非。
    但如果该链条很容易发生变化，导致调试和维护困难，那么还是建议使用普通调用的形式
 */

/*
    分解大型类
 */

/*
    用 return 退出多重循环
 */
