/**
 * 组合模式
 * 组合模式就是用小的子对象来构建更大的对象，而这些小的子对象本身也许是由更小的“孙对象”构成的。
 */

/*
    组合模式的用途
    组合模式将对象组合成树形结构，以表示“部分-整体”的层次结构。
    除了用来表示树形结构之外，组合模式的另一个好处是通过对象的多态性表现，使得用户对单个对象和组合对象的使用具有一致性，下面分别说明。

    表示树形结构。通过回顾上面的例子，我们很容易找到组合模式的一个优点：
    提供了一种遍历树形结构的方案，通过调用组合对象的 execute 方法，程序会递归调用组合对象下面的叶对象的 execute 方法，
    所以我们的万能遥控器只需要一次操作，便能依次完成关门、打开电脑、登录 QQ 这几件事情。
    组合模式可以非常方便地描述对象部分-整体层次结构。

    利用对象多态性统一对待组合对象和单个对象。
    利用对象的多态性表现，可以使客户端忽略组合对象和单个对象的不同。
    在组合模式中，客户将统一地使用组合结构中的所有对象，而不需要关心它究竟是组合对象还是单个对象。
 */

/*
    一些值得注意的地方
    在使用组合模式的时候，还有以下几个值得我们注意的地方。
    1. 组合模式不是父子关系
        组合模式的树型结构容易让人误以为组合对象和叶对象是父子关系，这是不正确的。

        组合模式是一种 HAS-A（聚合）的关系，而不是 IS-A。
        组合对象包含一组叶对象，但 Leaf 并不是 Composite 的子类。
        组合对象把请求委托给它所包含的所有叶对象，它们能够合作的关键是拥有相同的接口。
    
    2. 对叶对象操作的一致性
        组合模式除了要求组合对象和叶对象拥有相同的接口之外，还有一个必要条件，就是对一组叶对象的操作必须具有一致性。

        比如公司要给全体员工发放元旦的过节费 1000 块，这个场景可以运用组合模式，
        但如果公司给今天过生日的员工发送一封生日祝福的邮件，组合模式在这里就没有用武之地了，除非先把今天过生日的员工挑选出来。
        只有用一致的方式对待列表中的每个叶对象的时候，才适合使用组合模式。

    3. 双向映射关系
        发放过节费的通知步骤是从公司到各个部门，再到各个小组，最后到每个员工的邮箱里。
        这本身是一个组合模式的好例子，但要考虑的一种情况是，也许某些员工属于多个组织架构。
        比如某位架构师既隶属于开发组，又隶属于架构组，对象之间的关系并不是严格意义上的层次结构，
        在这种情况下，是不适合使用组合模式的，该架构师很可能会收到两份过节费。

        这种复合情况下我们必须给父节点和子节点建立双向映射关系，一个简单的方法是给小组和员工对象都增加集合来保存对方的引用。
        但是这种相互间的引用相当复杂，而且对象之间产生了过多的耦合性，修改或者删除一个对象都变得困难，此时我们可以引入中介者模式来管理这些对象。

    4. 用职责链模式提高组合模式性能
        在组合模式中，如果树的结构比较复杂，节点数量很多，在遍历树的过程中，性能方面也许表现得不够理想。
        有时候我们确实可以借助一些技巧，在实际操作中避免遍历整棵树，有一种现成的方案是借助职责链模式。
        职责链模式一般需要我们手动去设置链条，但在组合模式中，父对象和子对象之间实际上形成了天然的职责链。
        让请求顺着链条从父对象往子对象传递，或者是反过来从子对象往父对象传递，直到遇到可以处理该请求的对象为止，这也是职责链模式的经典运用场景之一。
*/

/*
    何时使用组合模式
    组合模式如果运用得当，可以大大简化客户的代码。一般来说，组合模式适用于以下这两种情况。

        表示对象的部分-整体层次结构。组合模式可以方便地构造一棵树来表示对象的部分-整体结构。
        特别是我们在开发期间不确定这棵树到底存在多少层次的时候。
        在树的构造最终完成之后，只需要通过请求树的最顶层对象，便能对整棵树做统一的操作。
        在组合模式中增加和删除树的节点非常方便，并且符合开放-封闭原则。

        客户希望统一对待树中的所有对象。
        组合模式使客户可以忽略组合对象和叶对象的区别，客户在面对这棵树的时候，
        不用关心当前正在处理的对象是组合对象还是叶对象，也就不用写一堆 if、else 语句来分别处理它们。
        组合对象和叶对象会各自做自己正确的事情，这是组合模式最重要的能力。
 */

/*
    组合模式并不是完美的，它可能会产生一个这样的系统：系统中的每个对象看起来都与其他对象差不多。
    它们的区别只有在运行的时候会才会显现出来，这会使代码难以理解。
    此外，如果通过组合模式创建了太多的对象，那么这些对象可能会让系统负担不起。
 */
